import type * as Rehype from 'hast'
import type * as MatchNode from 'hast-util-is-element'
import type * as Unified from 'unified'

export type Config = {
	/**
		Defines if existing ids should be overwritten.
	*/
	overwrite?: boolean,

	/**
		A function, which generates the desired slug. This plugin handles
		duplicate ids in {@link Config.uniqueifier | `uniqueifier`}, so there
		is no need for a fancy object wrapper.
	*/
	slugger: (textContent: string) => string,

	/**
		A {@link MatchNode.Test | `Test`} which marks nodes as sluggable.
		Defaults to headings.
	*/
	test?: MatchNode.Test,

	/**
		A function, which makes a slug more unique. It only gets called, if a
		generated slug (including the ones generated by this function) turns
		out to be a duplicate.
	*/
	uniqueifier?: (slug: string, instance: number, textContent: string) => string
}

export type Plugin = Unified.Plugin<Array<Config | Config['slugger']>, Rehype.Root>

/**
	Add ids to your rehype-nodes.

	@example
	import { rehype } from 'rehype'
	import slug from '@tinnedtea/rehype-slug'

	await rehype()
		.use(slug, () => String(Math.random()))
		.process('<h1/>')
	// returns '<h1 id="0.69..."/>'
*/
export const slug: Plugin
export default slug
